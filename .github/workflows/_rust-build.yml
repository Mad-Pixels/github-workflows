name: Rust Build

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
        description: "Directory containing Rust project"
      binaries:
        required: true
        type: string
        description: "JSON array of binary names to build"

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            platform: linux
            arch: amd64
          - os: ubuntu-latest  
            target: aarch64-unknown-linux-musl
            platform: linux
            arch: arm
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: darwin
            arch: arm
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Parse Binary Names
        id: parse-binaries
        uses: actions/github-script@v6
        with:
          script: |
            const bins = JSON.parse('${{ inputs.binaries }}');
            core.setOutput('binaries', JSON.stringify(bins));

      - name: Build Binaries
        run: |
          cd ${{ inputs.working-directory }}
          BINARIES=$(echo '${{ steps.parse-binaries.outputs.binaries }}' | jq -r '.[]')
          for binary in $BINARIES; do
            if [ "${{ matrix.platform }}" = "linux" ]; then
              cross build --release --target ${{ matrix.target }} -p action-${binary}
            else
              cargo build --release --target ${{ matrix.target }} -p action-${binary}
            fi
          done

      - name: Prepare Artifacts
        id: prepare-artifacts
        run: |
          BINARIES_JSON='${{ steps.parse-binaries.outputs.binaries }}'
          BINARIES=$(echo "$BINARIES_JSON" | jq -r '.[]')
          for binary in $BINARIES; do
            mkdir -p artifacts/${binary}_${{ matrix.platform }}_${{ matrix.arch }}
            cp ${{ inputs.working-directory }}/target/${{ matrix.target }}/release/action-${binary} artifacts/${binary}_${{ matrix.platform }}_${{ matrix.arch }}/action-${binary}
          done
          echo "binaries=$BINARIES_JSON" >> "$GITHUB_OUTPUT"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: artifacts/

    outputs:
      binaries: ${{ steps.prepare-artifacts.outputs.binaries }}
