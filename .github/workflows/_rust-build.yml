name: Rust Build

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
      binaries:
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            platform: linux
            arch: amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            platform: linux
            arch: arm
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: darwin
            arch: arm

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Parse binary names
        id: parse-binaries
        uses: actions/github-script@v6
        with:
          script: |
            const raw = '${{ inputs.binaries }}';
            if (!raw) {
              throw new Error('No binaries JSON provided');
            }
            const bins = JSON.parse(raw);
            core.setOutput('binaries', JSON.stringify(bins));

      - name: Install tools
        run: |
          if [ "${{ matrix.platform }}" = "linux" ]; then
            if ! command -v cross &> /dev/null; then
              cargo install cross --git https://github.com/cross-rs/cross
            fi
          else
            rustup target add ${{ matrix.target }}
          fi

      - name: Build
        run: |
          cd ${{ inputs.working-directory }}
          BJSON='${{ steps.parse-binaries.outputs.binaries }}'
          for bin in $(echo "$BJSON" | jq -r '.[]'); do
            if [ "${{ matrix.platform }}" = "linux" ]; then
              cross build --release --target ${{ matrix.target }} -p action-${bin}
            else
              cargo build --release --target ${{ matrix.target }} -p action-${bin}
            fi
          done

      - name: Prepare artifacts
        id: prepare-artifacts
        run: |
          BJSON='${{ steps.parse-binaries.outputs.binaries }}'
          for bin in $(echo "$BJSON" | jq -r '.[]'); do
            mkdir -p artifacts/${bin}_${{ matrix.platform }}_${{ matrix.arch }}
            cp ${{ inputs.working-directory }}/target/${{ matrix.target }}/release/action-${bin} artifacts/${bin}_${{ matrix.platform }}_${{ matrix.arch }}/action-${bin} 2>/dev/null || true
          done
          echo "binaries=$BJSON" >> "$GITHUB_OUTPUT"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: artifacts/

    outputs:
      binaries: ${{ steps.prepare-artifacts.outputs.binaries }}
