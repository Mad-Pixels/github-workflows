name: Docker Build

on:
  workflow_call:
    inputs:
      dockerfile:
        required: true
        type: string
        description: "Path to Dockerfile"
      image_name:
        required: true
        type: string
        description: "Local image name (without tag)"
      tag:
        required: true
        type: string
        description: "Image tag"
      build_args:
        required: false
        type: string
        description: "JSON object of build args. Example: {\"ARG1\":\"value1\"}"
        default: "{}"
      platforms:
        required: false
        type: string
        description: "Comma-separated list of platforms. Example: linux/amd64,linux/arm64"
        default: "linux/amd64,linux/arm64"
      context:
        required: false
        type: string
        default: "."
        description: "Docker build context path"

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          echo "matrix=$(echo '${{ inputs.platforms }}' | jq -cR '{ platform: split(",") }')" >> $GITHUB_OUTPUT

  build:
    needs: discover
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.discover.outputs.matrix) }}
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - name: Download Docker Context
        if: inputs.context != '.'
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.context }}
          path: ${{ inputs.context }}

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Check Context
        run: |
          echo "Docker context contents:"
          ls -la docker-context/

      - name: Build Docker image (no push)
        id: docker_build
        run: |
          BUILD_ARGS=""
          for arg in $(echo '${{ inputs.build_args }}' | jq -r 'to_entries | .[] | "--build-arg \(.key)=\(.value)"'); do
            BUILD_ARGS="$BUILD_ARGS $arg"
          done
          
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --file ${{ inputs.context }}/Dockerfile.terraform \
            ${BUILD_ARGS} \
            -t ${{ inputs.image_name }}:${{ inputs.tag }} \
            --load \
            ${{ inputs.context }}

      - name: Save Docker image as artifact
        run: |
          PLATFORM_NAME=$(echo "${{ matrix.platform }}" | tr '/' '_')
          IMAGE_TAR="${{ inputs.image_name }}_${{ inputs.tag }}_${PLATFORM_NAME}.tar"
          docker save -o "$IMAGE_TAR" ${{ inputs.image_name }}:${{ inputs.tag }}
          echo "IMAGE_TAR=$IMAGE_TAR" >> $GITHUB_ENV
          echo "PLATFORM_NAME=$PLATFORM_NAME" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.image_name }}-${{ env.PLATFORM_NAME }}
          path: ${{ env.IMAGE_TAR }}
          compression-level: 0