name: Rust Build

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
        description: "Directory containing Rust project"
      binaries:
        required: true
        type: string
        description: "JSON array of binary names to build"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            platform: linux
            arch: amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            platform: linux
            arch: arm
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: darwin
            arch: arm
    steps:
      - uses: actions/checkout@v3

      - name: Parse binary names
        id: parse-binaries
        uses: actions/github-script@v6
        with:
          script: |
            const binaries = JSON.parse('${{ inputs.binaries }}');
            core.setOutput('binaries', JSON.stringify(binaries));

      - name: Install dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Install dependencies (macOS)
        if: matrix.platform == 'darwin'
        run: |
          rustup target add ${{ matrix.target }}

      - name: Build binaries
        run: |
          cd ${{ inputs.working-directory }}
          BINARIES='${{ steps.parse-binaries.outputs.binaries }}'
          echo "$BINARIES" | jq -r '.[]' | while read binary; do
            if [ "${{ matrix.platform }}" = "linux" ]; then
              cross build --release --target ${{ matrix.target }} -p action-${binary}
            else
              cargo build --release --target ${{ matrix.target }} -p action-${binary}
            fi
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ fromJSON(steps.parse-binaries.outputs.binaries)[matrix.binary] }}_${{ matrix.platform }}_${{ matrix.arch }}
          path: ${{ inputs.working-directory }}/target/${{ matrix.target }}/release/action-${{ fromJSON(steps.parse-binaries.outputs.binaries)[matrix.binary] }}