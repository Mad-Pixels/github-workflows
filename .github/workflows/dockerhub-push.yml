name: Docker Build

on:
  workflow_call:
    inputs:
      dockerfile:
        required: true
        type: string
        description: "Path to Dockerfile (relative to context)"
      image_name:
        required: true
        type: string
        description: "Полное имя репозитория. Пример: myuser/myrepo"
      tag:
        required: true
        type: string
        description: "Тег для образа (без архитектуры). Пример: v1.0.0"
      build_args:
        required: false
        type: string
        default: "{}"
        description: 'JSON-объект аргументов сборки. Пример: {"ARG1":"value1"}'
      platforms:
        required: false
        type: string
        default: "linux/amd64,linux/arm64"
        description: "Список платформ через запятую"
      context:
        required: false
        type: string
        default: "."
        description: "Путь к контексту сборки Docker"
    secrets:
      dockerhub-username:
        required: true
      dockerhub-token:
        required: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Скачиваем контекст, если он был загружен ранее через upload-artifact
      - name: Download Context
        if: ${{ inputs.context != '.' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.context }}
          path: ${{ inputs.context }}

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.dockerhub-username }}
          password: ${{ secrets.dockerhub-token }}

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Build multi-arch and push
        run: |
          # Превращаем JSON build_args в "--build-arg KEY=VALUE"
          BUILD_ARGS=""
          for arg in $(echo '${{ inputs.build_args }}' | jq -r 'to_entries | .[] | "--build-arg \(.key)=\(.value)"'); do
            BUILD_ARGS="$BUILD_ARGS $arg"
          done

          # Собираем всё за один раз, пушим под одним тегом
          docker buildx build \
            --platform ${{ inputs.platforms }} \
            --file ${{ inputs.context }}/${{ inputs.dockerfile }} \
            $BUILD_ARGS \
            -t ${{ inputs.image_name }}:${{ inputs.tag }} \
            --push \
            ${{ inputs.context }}
