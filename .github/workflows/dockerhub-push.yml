name: Docker Build

on:
 workflow_call:
   inputs:
     dockerfile:
       required: true
       type: string
       description: "Path to Dockerfile"
     image_name:
       required: true
       type: string
       description: "Local image name (without tag)" 
     tag:
       required: true
       type: string
       description: "Image tag"
     repository:
       required: true
       type: string
       description: "DockerHub repository name"
     build_args:
       required: false
       type: string
       description: "JSON object of build args"
       default: "{}"
     platforms: 
       required: false
       type: string
       description: "Comma-separated list of platforms"
       default: "linux/amd64,linux/arm64"
     context:
       required: false
       type: string
       default: "."
       description: "Docker build context path"
   secrets:
     dockerhub-username:
       required: true
     dockerhub-token:
       required: true

jobs:
 discover:
   runs-on: ubuntu-latest
   outputs:
     matrix: ${{ steps.set-matrix.outputs.matrix }}
   steps:
     - id: set-matrix
       run: |
         echo "matrix=$(echo '${{ inputs.platforms }}' | jq -cR '{ platform: split(",") }')" >> $GITHUB_OUTPUT

 build-and-push:
   needs: discover
   runs-on: ubuntu-latest
   strategy:
     matrix: ${{ fromJson(needs.discover.outputs.matrix) }}
     fail-fast: false

   steps:
     - uses: actions/checkout@v3

     - name: Download Context
       if: inputs.context != '.'
       uses: actions/download-artifact@v4
       with:
         name: ${{ inputs.context }}
         path: ${{ inputs.context }}

     - name: Login to DockerHub
       uses: docker/login-action@v2
       with:
         username: ${{ secrets.dockerhub-username }}
         password: ${{ secrets.dockerhub-token }}

     - uses: docker/setup-qemu-action@v3
     
     - uses: docker/setup-buildx-action@v3
       with:
         install: true

     - name: Build and Push
       run: |
         BUILD_ARGS=""
         for arg in $(echo '${{ inputs.build_args }}' | jq -r 'to_entries | .[] | "--build-arg \(.key)=\(.value)"'); do
           BUILD_ARGS="$BUILD_ARGS $arg"
         done

         docker buildx build \
            --platform ${{ matrix.platform }} \
            --file ${{ inputs.context }}/${{ inputs.dockerfile }} \
            ${BUILD_ARGS} \
            -t "madpixels/${{ inputs.repository }}:${{ inputs.tag }}" \
            --push \
            ${{ inputs.context }}

     # Wait for all platform builds to complete before creating manifest
     - name: Create Multi-Platform Manifest
       if: success() && matrix.platform == matrix.platform[0]
       run: |
         MANIFEST_TAG="madpixels/${{ inputs.repository }}:${{ inputs.tag }}"
         
         # Platform specific tags
         TAGS=""
         for platform in $(echo '${{ inputs.platforms }}' | tr ',' ' '); do
           PLATFORM_NAME=$(echo "$platform" | tr '/' '_')
           TAGS="$TAGS $MANIFEST_TAG-$PLATFORM_NAME"
         done

         # Create and push manifest
         docker buildx imagetools create --tag "$MANIFEST_TAG" $TAGS