name: AWS Terraform

on:
  workflow_call:
    inputs:
      terraform_version:
        description: 'Terraform version to use'
        required: false
        type: string
        default: '1.6.1'
      terraform_dir:
        description: 'Directory containing Terraform configuration'
        required: true
        type: string
      terraform_command:
        description: 'Terraform command to run (plan or apply)'
        required: true
        type: string
      backend_bucket:
        description: 'S3 bucket for Terraform state'
        required: true
        type: string
      backend_key:
        description: 'S3 key for Terraform state'
        required: true
        type: string
      backend_region:
        description: 'AWS region for S3 backend'
        required: true
        type: string
      workspace:
        description: 'Terraform workspace to use'
        required: false
        type: string
        default: 'default'
    secrets:
      AWS_ACCESS_KEY:
        required: true
      AWS_SECRET_KEY:
        required: true
      AWS_REGION:
        required: true
      

jobs:
  terraform:
    name: 'Terraform Job'
    runs-on: ubuntu-latest
    
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      TF_DIR: ${{ inputs.terraform_dir }}
      TF_COMMAND: ${{ inputs.terraform_command }}
      TF_WORKSPACE: ${{ inputs.workspace }}
      
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.terraform_dir }}
        
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform_version }}
        
    - name: Create backend_aws.hcl
      run: |
        cat > backend_aws.hcl << EOF
        bucket  = "${{ inputs.backend_bucket }}"
        key     = "${{ inputs.backend_key }}"
        region  = "${{ inputs.backend_region }}"
        encrypt = true
        EOF

    - name: Create backend configuration
      run: |
        cat << EOF > backend.tf
        terraform {
          backend "s3" {}
        }
        EOF
      
    - name: Terraform Init
      run: terraform init -reconfigure -backend-config=backend_aws.hcl -input=false
    
    - name: Setup Terraform Workspace
      run: |
        WORKSPACES=$(terraform workspace list)
        echo "Available workspaces:"
        echo "$WORKSPACES"
        
        if echo "$WORKSPACES" | grep -q "$TF_WORKSPACE"; then
          echo "Workspace $TF_WORKSPACE exists. Selecting it..."
          terraform workspace select "$TF_WORKSPACE"
        else
          echo "Workspace $TF_WORKSPACE does not exist. Creating it..."
          terraform workspace new "$TF_WORKSPACE"
        fi
        
        echo "Current workspace: $(terraform workspace show)"
      
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      continue-on-error: true
      
    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      if: ${{ inputs.terraform_command == 'plan' }}
      run: terraform plan -input=false -no-color
      id: plan
      
    - name: Terraform Apply
      if: ${{ inputs.terraform_command == 'apply' }}
      run: terraform apply -auto-approve -input=false -no-color
      id: apply
      
    - name: Output Results
      run: |
        if [[ "$TF_COMMAND" == "plan" ]]; then
          echo "::group::Terraform Plan Output"
          echo "${{ steps.plan.outputs.stdout }}"
          echo "::endgroup::"
        elif [[ "$TF_COMMAND" == "apply" ]]; then
          echo "::group::Terraform Apply Output"
          echo "${{ steps.apply.outputs.stdout }}"
          echo "::endgroup::"
        fi