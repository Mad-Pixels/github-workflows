name: Is Commit
description: |
  Determines whether a push is a plain commit (proceed=true) 
  or part of a PR merge/squash (proceed=false), *solely* by querying 
  the GitHub API for pull‐requests touching that SHA.

inputs:
  github_token:
    description: "GitHub token to call the API"
    required: true

outputs:
  proceed:
    description: "'true' if this is a normal commit, 'false' if it's a PR merge/squash"
    value: ${{ steps.prcheck.outputs.proceed }}
  pr_numbers:
    description: "List of PR numbers associated with this commit (if any)"
    value: ${{ steps.prcheck.outputs.pr_numbers }}

runs:
  using: composite
  steps:
    - name: Check pull request association via GitHub API
      id: prcheck
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        SHA:         ${{ github.event.head_commit.id || github.sha }}
        REPO:        ${{ github.repository }}
      run: |
        echo "Checking commit $SHA in repo $REPO..."
        
        # First check with the standard API
        response=$(curl -s \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/repos/$REPO/commits/$SHA/pulls")
        
        # Debug info
        echo "API Response:"
        echo "$response" | jq 2>/dev/null || echo "Failed to parse JSON response"
        
        # Проверяем, является ли ответ массивом или объектом с сообщением об ошибке
        is_array=$(echo "$response" | jq 'if type=="array" then true else false end')
        if [ "$is_array" = "false" ]; then
          # Если это не массив, проверяем наличие сообщения об ошибке
          error=$(echo "$response" | jq -r '.message // empty')
          echo "::warning::API Response is not an array. Possible error: $error"
          
          # Fallback to search API for merged PRs
          echo "Trying alternative method to detect PR association..."
          
          # Search for merged PRs that contain this commit
          search_result=$(curl -s \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/search/issues?q=repo:$REPO+is:pr+is:merged+SHA:$SHA")
            
          pr_count=$(echo "$search_result" | jq '.total_count')
          
          if [ "$pr_count" -gt 0 ]; then
            echo "Found $pr_count merged PR(s) associated with this commit → skip"
            pr_numbers=$(echo "$search_result" | jq -r '.items[].number' | tr '\n' ',')
            pr_numbers=${pr_numbers%,}  # Remove trailing comma
            echo "PR Numbers: $pr_numbers"
            # Используем переменную GITHUB_OUTPUT для установки выходных данных
            echo "pr_numbers=$pr_numbers" >> $GITHUB_OUTPUT
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
        fi
        
        # Process normal response
        count=$(echo "$response" | jq 'length')
        if [ "$count" -gt 0 ]; then
          echo "Found $count PR(s) — this is a merge/squash → skip"
          pr_numbers=$(echo "$response" | jq -r '.[].number' | tr '\n' ',')
          pr_numbers=${pr_numbers%,}  # Remove trailing comma
          echo "PR Numbers: $pr_numbers"
          # Используем переменную GITHUB_OUTPUT для установки выходных данных
          echo "pr_numbers=$pr_numbers" >> $GITHUB_OUTPUT
          echo "proceed=false" >> $GITHUB_OUTPUT
        else
          echo "No PR associated → normal commit"
          # Используем переменную GITHUB_OUTPUT для установки выходных данных
          echo "proceed=true" >> $GITHUB_OUTPUT
          echo "pr_numbers=" >> $GITHUB_OUTPUT
          # Выводим и на экран для отладки
          echo "Set proceed=true in output"
        fi