name: 'Terraform Runner'
description: 'Init, workspace, fmt/validate and plan/apply in one place'

inputs:
  aws_access_key_id:
    description: 'AWS access key ID'
    required: true
  aws_secret_access_key:
    description: 'AWS secret access key'
    required: true
  aws_region:
    description: 'AWS region'
    required: true
  tf_dir:
    description: 'Path to Terraform config'
    required: true
  command:
    description: 'plan or apply'
    required: true
    default: plan
  workspace:
    description: 'Terraform workspace'
    required: false
    default: default
  backend_bucket:
    description: 'S3 bucket for state'
    required: true
  backend_key:
    description: 'S3 key for state'
    required: true
  backend_region:
    description: 'Region of S3 bucket'
    required: true
  terraform_version:
    description: 'Terraform version'
    required: false
    default: '1.6.1'
  tf_vars:
    description: 'Extra `-var` flags (CLI)'
    required: false
    default: ''

runs:
  using: composite
  steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:     ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region:            ${{ inputs.aws_region }}

    - name: Export AWS region for Terraform
      shell: bash
      run: echo "TF_VAR_aws_region=${{ inputs.aws_region }}" >> $GITHUB_ENV

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform_version }}

    - name: Create backend_aws.hcl
      shell: bash
      working-directory: ${{ inputs.tf_dir }}
      run: |
        cat > backend_aws.hcl <<EOF
        bucket  = "${{ inputs.backend_bucket }}"
        key     = "${{ inputs.backend_key }}"
        region  = "${{ inputs.backend_region }}"
        encrypt = true
        EOF

    - name: Create backend.tf with S3 backend block
      shell: bash
      working-directory: ${{ inputs.tf_dir }}
      run: |
        cat > backend.tf <<EOF
        terraform {
          backend "s3" {}
        }
        EOF

    - name: Terraform Init
      shell: bash
      working-directory: ${{ inputs.tf_dir }}
      run: terraform init -input=false -reconfigure -backend-config=backend_aws.hcl

    - name: Select or create workspace
      shell: bash
      working-directory: ${{ inputs.tf_dir }}
      run: |
        terraform workspace select "${{ inputs.workspace }}" \
          || terraform workspace new "${{ inputs.workspace }}"
        echo "Current workspace: $(terraform workspace show)"

    - name: Terraform fmt & validate
      shell: bash
      working-directory: ${{ inputs.tf_dir }}
      run: |
        terraform fmt -check -recursive
        terraform validate

    - name: Terraform ${{ inputs.command }}
      shell: bash
      working-directory: ${{ inputs.tf_dir }}
      run: |
        if [ "${{ inputs.command }}" = "apply" ]; then
          terraform apply -input=false -auto-approve ${{ inputs.tf_vars }}
        else
          terraform plan -input=false ${{ inputs.tf_vars }}
        fi