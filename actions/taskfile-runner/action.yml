---
name: Task Runner
description: Invoke Taskfile commands

inputs:
  command:
    description: 'Task command to run for invoke'
    required: true
  vars:
    description: 'Envs for command, format: (key=value,key=value)'
    required: false
  dir:
    description: 'Working directory'
    required: false
    default: '.'
  version:
    description: 'Taskfile version'
    required: false
    default: '3.44.1'

outputs:
  task_version:
    description: 'Installed Task version'
    value: ${{ steps.install.outputs.version }}
  task_output:
    description: 'Task command output'
    value: ${{ steps.run.outputs.output }}

runs:
  using: composite
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate Taskfile exists
      shell: bash
      working-directory: ${{ inputs.dir }}
      run: |
        set -euo pipefail
        
        if [[ ! -f "Taskfile.yml" && ! -f "Taskfile.yaml" ]]; then
          echo "‚ùå No Taskfile found in ${{ inputs.dir }}"
          echo "Expected: Taskfile.yml or Taskfile.yaml"
          exit 1
        fi
        
        echo "‚úÖ Taskfile found"

    - name: Detect architecture
      id: arch
      shell: bash
      run: |
        set -euo pipefail
        
        ARCH=$(uname -m)
        case "$ARCH" in
          x86_64) ARCH="amd64" ;;
          aarch64|arm64) ARCH="arm64" ;;
          *) echo "‚ùå Unsupported architecture: $ARCH" && exit 1 ;;
        esac

        echo "arch=$ARCH" >> $GITHUB_OUTPUT

    - name: Cache Task binary
      id: cache
      uses: actions/cache@v4
      with:
        path: ${{ env.HOME }}/.cache/task/task-${{ inputs.version }}-${{ steps.arch.outputs.arch }}
        key: task-${{ inputs.version }}-${{ steps.arch.outputs.arch }}

    - name: Download Task binary
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        set -euo pipefail

        VERSION="${{ inputs.version }}"
        ARCH="${{ steps.arch.outputs.arch }}"
        echo "‚¨áÔ∏è  Downloading Task v$VERSION for $ARCH..."

        TMPDIR="$(mktemp -d)"
        trap 'rm -rf "$TMPDIR"' EXIT

        mkdir -p ~/.cache/task
        curl -fsSLo "$TMPDIR/task.tgz" "https://github.com/go-task/task/releases/download/v${VERSION}/task_linux_${ARCH}.tar.gz"
        tar -xzf "$TMPDIR/task.tgz" -C "$TMPDIR"

        TASK_BINARY=""
        for cand in \
          "$TMPDIR/task" \
          "$TMPDIR/bin/task" \
          "$TMPDIR/task_linux_${ARCH}/task"
        do
          if [[ -f "$cand" && -x "$cand" ]]; then
            TASK_BINARY="$cand"
            break
          fi
        done

        if [[ -z "$TASK_BINARY" ]]; then
          TASK_BINARY="$(find "$TMPDIR" -maxdepth 3 -type f -name task -perm -111 -print -quit || true)"
        fi

        if [[ -z "$TASK_BINARY" ]]; then
          echo "‚ùå Task binary not found in archive"
          exit 1
        fi

        mv "$TASK_BINARY" ~/.cache/task/task-$VERSION-$ARCH
        echo "‚úÖ Downloaded to ~/.cache/task/task-$VERSION-$ARCH"

    - name: Install Task binary
      id: install
      shell: bash
      run: |
        set -euo pipefail

        VERSION="${{ inputs.version }}"
        ARCH="${{ steps.arch.outputs.arch }}"
        SRC="$HOME/.cache/task/task-$VERSION-$ARCH"
        DEST="$HOME/.local/bin/task"

        if [[ ! -x "$SRC" ]]; then
          echo "‚ùå Task binary not found or not executable: $SRC"
          exit 1
        fi

        mkdir -p "$(dirname "$DEST")"
        install -m 0755 "$SRC" "$DEST"

        echo "$HOME/.local/bin" >> "$GITHUB_PATH"

        VER_RAW="$("$DEST" --version 2>&1 | head -n1 | tr -d '\r')"
        VER="$(printf '%s\n' "$VER_RAW" | grep -Eo 'v?[0-9]+(\.[0-9]+)+' | head -n1 || true)"
        if [[ -z "$VER" ]]; then
          VER="$VER_RAW"
        fi
        
        [[ "$VER" != v* ]] && VER="v$VER"
        echo "‚úÖ Installed task $VER"
        echo "version=$VER" >> "$GITHUB_OUTPUT"

    - name: Export environment variables
      if: ${{ inputs.vars != '' }}
      shell: bash
      run: |
        set -euo pipefail
    
        echo "üåê Exporting env vars:"
        IFS=',' read -ra VARS <<< "${{ inputs.vars }}"
        for var in "${VARS[@]}"; do
          pair="$(echo "$var" | xargs)"
          [[ -z "$pair" ]] && continue

          key="${pair%%=*}"
          value="${pair#*=}"
          if [[ "$value" == "$key" ]]; then
            echo "‚ùå Invalid var format: $pair (missing '=' separator)"
            exit 1
          fi
          if [[ -z "$key" ]]; then
            echo "‚ùå Invalid var (empty key): $pair"
            exit 1
          fi

          delim="ENV_${key}_$RANDOM$RANDOM"
          {
            echo "$key<<$delim"
            printf "%s\n" "$value"
            echo "$delim"
          } >> "$GITHUB_ENV"
        done

    - name: Run Taskfile command
      id: run
      shell: bash
      working-directory: ${{ inputs.dir }}
      run: |
        set -euo pipefail
        
        echo "üöÄ Running task ${{ inputs.command }}"

        set +e
        OUTPUT=$(task ${{ inputs.command }} 2>&1)
        EXIT_CODE=$?
        set -e

        printf "%s\n" "$OUTPUT"
        
        DELIM="__TASK_OUTPUT_$(date +%s%N)__"
        {
          echo "output<<$DELIM"
          printf "%s\n" "$OUTPUT"
          echo "$DELIM"
        } >> "$GITHUB_OUTPUT"
        if [[ $EXIT_CODE -ne 0 ]]; then
          echo "‚ùå Task failed with exit code $EXIT_CODE"
          exit $EXIT_CODE
        fi
        
        echo "‚úÖ Task completed successfully"

    - name: Task Runner Summary
      shell: bash
      run: |
        set -euo pipefail

        LIMIT=200
        OUT_STR="${{ steps.run.outputs.output }}"
        
        set -f 
        IFS=$'\n' read -r -d '' -a LINES <<< "${OUT_STR}"$'\0'
        set +f

        TOTAL="${#LINES[@]}"
        MAX="$LIMIT"; if (( TOTAL < LIMIT )); then MAX="$TOTAL"; fi

        {
          echo "## üß∞ Task Runner Summary"
          echo "- Command: \`${{ inputs.command }}\`"
          echo "- Directory: \`${{ inputs.dir }}\`"
          echo "- Task version: \`${{ steps.install.outputs.version }}\`"

          if (( TOTAL > 0 )); then
            echo ""
          if (( TOTAL <= LIMIT )); then
            echo "### üßæ Task output"
          else
            echo "### üßæ Task output (first ${LIMIT} lines of ${TOTAL})"
          fi
            echo '```'
            for ((i=0; i<MAX; i++)); do
              printf '%s\n' "${LINES[i]}"
            done
            echo '```'
          fi
        } >> "$GITHUB_STEP_SUMMARY"

