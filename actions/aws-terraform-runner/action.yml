---
name: 'Terraform Runner'
description: 'Invoke AWS Terraform with S3 backend'

inputs:
  aws_access_key_id:
    description: 'AWS access key ID'
    required: false
  aws_secret_access_key:
    description: 'AWS secret access key'
    required: false
  aws_region:
    description: 'AWS region'
    required: true
  role_to_assume:
    description: 'AWS IAM role ARN to assume'
    required: false

  tf_dir:
    description: 'Path to Terraform config'
    required: true
  tf_workspace:
    description: 'Terraform workspace'
    required: false
    default: ""
  tf_command:
    description: 'Terraform command: plan | apply | destroy'
    required: true
  tf_vars:
    description: 'Extra CLI flags for terraform (e.g. -var="a=b" -var-file=prod.tfvars)'
    required: false
    default: ''
  tf_version:
    description: 'Terraform version'
    required: false
    default: '1.8.5'

  backend_bucket:
    description: 'S3 bucket for state'
    required: true
  backend_key:
    description: 'S3 key for state'
    required: true
  backend_region:
    description: 'Backend AWS region'
    required: true

  show_summary:
    description: 'Print summary with output in job summary'
    required: false
    default: 'true'
  summary_limit:
    description: 'Max number of plan output lines to show in summary'
    required: false
    default: '500'

outputs:
  terraform_command:
    description: 'Executed Terraform command'
    value: ${{ steps.collect.outputs.terraform_command }}
  workspace:
    description: 'Terraform workspace used'
    value: ${{ steps.collect.outputs.workspace }}
  terraform_version:
    description: 'Detected Terraform version'
    value: ${{ steps.collect.outputs.terraform_version }}

runs:
  using: composite
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Validate inputs
      shell: bash
      run: |
        set -euo pipefail

        if [[ ! -d "${{ inputs.tf_dir }}" ]]; then
          echo "❌ tf_dir not found: ${{ inputs.tf_dir }}"
          exit 1
        fi

        case "${{ inputs.tf_command }}" in
          plan|apply|destroy) ;;
          *)
            echo "❌ Unknown tf_command: ${{ inputs.tf_command }} (expected: plan|apply|destroy)"
            exit 1
            ;;
        esac

        for r in "${{ inputs.aws_region }}" "${{ inputs.backend_region }}"; do
          if [[ ! "$r" =~ ^[a-z]{2}-[a-z]+-[0-9]+$ ]]; then
            echo "❌ Invalid AWS region: $r"
            exit 1
          fi
        done

        if [[ -z "${{ inputs.backend_bucket }}" || -z "${{ inputs.backend_key }}" ]]; then
          echo "❌ backend_bucket/backend_key must be provided"
          exit 1
        fi

        echo "✅ Inputs validated"

    - name: Configure AWS authentication
      uses: Mad-Pixels/github-workflows/internal/aws-auth@v1
      with:
        aws_secret_key: ${{ inputs.aws_secret_access_key }}
        aws_access_key: ${{ inputs.aws_access_key_id }}
        role_to_assume: ${{ inputs.role_to_assume }}
        aws_region: ${{ inputs.aws_region }}

    - name: Export Terraform env
      shell: bash
      run: |
        set -euo pipefail
        {
          echo "TF_IN_AUTOMATION=1"
          echo "TF_INPUT=0"
          echo "TF_VAR_aws_region=${{ inputs.aws_region }}"
        } >> "$GITHUB_ENV"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.tf_version }}

    - name: Write backend_aws.hcl
      working-directory: ${{ inputs.tf_dir }}
      shell: bash
      run: |
        set -euo pipefail
        cat > backend_aws.hcl <<'HCL'
        bucket  = "${{ inputs.backend_bucket }}"
        key     = "${{ inputs.backend_key }}"
        region  = "${{ inputs.backend_region }}"
        encrypt = true
        HCL

    - name: Write backend.tf
      working-directory: ${{ inputs.tf_dir }}
      shell: bash
      run: |
        set -euo pipefail
        cat > backend.tf <<'TF'
        terraform {
          backend "s3" {}
        }
        TF

    - name: Terraform Init
      shell: bash
      working-directory: ${{ inputs.tf_dir }}
      run: |
        set -euo pipefail
        terraform init -input=false -reconfigure -backend-config=backend_aws.hcl

    - name: Select or create workspace
      if: inputs.tf_workspace != ''
      shell: bash
      working-directory: ${{ inputs.tf_dir }}
      run: |
        set -euo pipefail
        terraform workspace select "${{ inputs.tf_workspace }}" \
          || terraform workspace new "${{ inputs.tf_workspace }}"
        echo "Current workspace: $(terraform workspace show)"

    - name: Terraform Validate
      shell: bash
      working-directory: ${{ inputs.tf_dir }}
      run: |
        set -euo pipefail
        terraform validate

    - name: Run Terraform Command
      id: tf-run
      shell: bash
      working-directory: ${{ inputs.tf_dir }}
      run: |
        set -euo pipefail
        CMD="${{ inputs.tf_command }}"
        EXTRA='${{ inputs.tf_vars }}'
        case "$CMD" in
          plan)
            echo "🚀 terraform plan"
            terraform plan -input=false -lock-timeout=300s -out=tfplan $EXTRA
            ;;
          apply)
            echo "🚀 terraform apply"
            terraform apply -input=false -auto-approve -lock-timeout=300s $EXTRA
            ;;
          destroy)
            echo "🚀 terraform destroy"
            terraform destroy -input=false -auto-approve -lock-timeout=300s $EXTRA
            ;;
        esac

    - name: Upload plan artifact
      if: inputs.tf_command == 'plan'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: ${{ inputs.tf_dir }}/tfplan
        if-no-files-found: error

    - name: Collect outputs
      id: collect
      shell: bash
      working-directory: ${{ inputs.tf_dir }}
      run: |
        set -euo pipefail
        CMD="${{ inputs.tf_command }}"

        if [[ -n "${{ inputs.tf_workspace }}" ]]; then
          WS="${{ inputs.tf_workspace }}"
        else
          WS="$(terraform workspace show 2>/dev/null | tr -d '\r' | head -n1)"
          WS="${WS## }"; WS="${WS%% }"
          [[ -z "$WS" ]] && WS="default"
        fi

        TFV="$(terraform version -json 2>/dev/null | sed -n 's/.*"terraform_version":"\([^"]*\)".*/\1/p')"
        [[ -z "$TFV" ]] && TFV="${{ inputs.tf_version }}"

        write_output () {
          local name="$1"; shift
          local val="$1"
          local delim="__${name}_$(date +%s%N)__"
          {
            echo "${name}<<${delim}"
            printf "%s\n" "$val"
            echo "${delim}"
          } >> "$GITHUB_OUTPUT"
        }

        write_output terraform_command "$CMD"
        write_output terraform_version "$TFV"
        write_output workspace "$WS"

    - name: Terraform Summary
      if: inputs.show_summary != 'false'
      continue-on-error: true
      shell: bash
      working-directory: ${{ inputs.tf_dir }}
      env:
        LIMIT: ${{ inputs.summary_limit }}
        TF_COMMAND: ${{ inputs.tf_command }}
        TF_DIR: ${{ inputs.tf_dir }}
        TF_WORKSPACE: ${{ inputs.tf_workspace }}
        TF_VERSION: ${{ steps.collect.outputs.terraform_version }}
        BACKEND_BUCKET: ${{ inputs.backend_bucket }}
        BACKEND_KEY: ${{ inputs.backend_key }}
        BACKEND_REGION: ${{ inputs.backend_region }}
        AWS_REGION: ${{ inputs.aws_region }}
      run: |
        set -eo pipefail
        [[ "$LIMIT" =~ ^[0-9]+$ ]] || LIMIT=250

        WS="${TF_WORKSPACE:-}"
        [ -z "$WS" ] && WS="default"

        {
          echo "## 🛠️ Terraform Execution Summary"
          echo "- **Command:** \`${TF_COMMAND:-}\`"
          echo "- **Directory:** \`${TF_DIR:-.}\`"
          echo "- **Workspace:** \`${WS}\`"
          [ -n "${TF_VERSION:-}" ] && echo "- **Terraform version:** \`${TF_VERSION}\`"
          if [ -n "${BACKEND_BUCKET:-}" ] && [ -n "${BACKEND_KEY:-}" ]; then
            echo "- **Backend:** S3 \`${BACKEND_BUCKET}:${BACKEND_KEY}\`"
            [ -n "${BACKEND_REGION:-}" ] && echo "  in \`${BACKEND_REGION}\`"
          fi
          [ -n "${AWS_REGION:-}" ] && echo "- **AWS region (vars):** \`${AWS_REGION}\`"

          if [ "${TF_COMMAND:-}" = "plan" ] && [ -f tfplan ]; then
            echo
            if command -v terraform >/dev/null 2>&1; then
              TOTAL_LINES=$(terraform show -no-color tfplan | wc -l | awk '{print $1}')
              echo "### 📄 Plan (first ${LIMIT} lines${TOTAL_LINES:+ of ${TOTAL_LINES}})"
              terraform show -no-color tfplan | sed -n "1,${LIMIT}p"
              if [ -n "${TOTAL_LINES:-}" ] && [ "$TOTAL_LINES" -gt "$LIMIT" ]; then
                echo
                echo "_…truncated, total lines: $TOTAL_LINES_"
              fi
            else
              echo "### 📄 Plan"
              echo "_terraform binary not available to render plan output_"
            fi
          fi
        } >> "${GITHUB_STEP_SUMMARY:-/dev/null}" || true
