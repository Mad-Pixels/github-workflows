---
name: 'CloudFront Invalidation'
description: 'Create a CloudFront invalidation to clear cache'

inputs:
  aws_access_key:
    description: 'AWS access key ID'
    required: false
  aws_secret_key:
    description: 'AWS secret access key'
    required: false
  aws_region:
    description: 'AWS region'
    required: true
  role_to_assume:
    description: 'AWS IAM role ARN to assume'
    required: false

  distribution_id:
    description: 'CloudFront distribution ID'
    required: true
  paths:
    description: >
      Space-separated paths to invalidate (e.g. "/* /index.html /css/*")
    required: false
    default: "/*"
  caller_reference:
    description: >
      Unique reference for this invalidation (auto-generated if not provided)
    required: false
  wait_for_completion:
    description: 'Wait until invalidation status becomes Completed'
    required: false
    default: 'false'

outputs:
  invalidation_id:
    description: 'ID of the created invalidation'
    value: ${{ steps.invalidate.outputs.invalidation_id }}
  status:
    description: 'Status of the invalidation (InProgress/Completed)'
    value: ${{ steps.invalidate.outputs.status }}
  caller_reference:
    description: 'CallerReference used for this invalidation'
    value: ${{ steps.invalidate.outputs.caller_reference }}

runs:
  using: composite
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        set -euo pipefail

        if ! command -v aws >/dev/null 2>&1 || ! command -v jq >/dev/null 2>&1; then
          echo "‚ùå AWS CLI and jq are required on the runner (use ubuntu-latest)"
          exit 1
        fi

        if [[ ! "${{ inputs.distribution_id }}" =~ ^E[A-Z0-9]{13}$ ]]; then
          echo "‚ùå Invalid CloudFront distribution ID: ${{ inputs.distribution_id }}"
          echo "Expected pattern: ^E[A-Z0-9]{13}$ (e.g., E1234567890ABC)"
          exit 1
        fi

        PATHS="${{ inputs.paths }}"
        if [[ -z "$PATHS" ]]; then
          echo "‚ùå 'paths' cannot be empty"
          exit 1
        fi

        read -r -a PATHS_ARRAY <<< "$PATHS"
        PATHS_COUNT=${#PATHS_ARRAY[@]}
        if (( PATHS_COUNT == 0 )); then
          echo "‚ùå No paths provided"
          exit 1
        fi

        if (( PATHS_COUNT > 1000 )); then
          echo "‚ùå Too many paths ($PATHS_COUNT) ‚Äî CloudFront allows up to 1000 per invalidation"
          echo "   Consider using fewer paths or a wildcard like /*"
          exit 1
        fi

        for p in "${PATHS_ARRAY[@]}"; do
          if [[ ! "$p" =~ ^/ ]]; then
            echo "‚ùå Invalid path: $p (must start with /)"
            exit 1
          fi
        done

        echo "‚úÖ Input validation passed ($PATHS_COUNT path(s))"

    - name: Configure AWS authentication
      uses: Mad-Pixels/github-workflows/internal/aws-auth@v1
      with:
        aws_access_key: ${{ inputs.aws_access_key }}
        aws_secret_key: ${{ inputs.aws_secret_key }}
        role_to_assume: ${{ inputs.role_to_assume }}
        aws_region: ${{ inputs.aws_region }}

    - name: Create CloudFront invalidation
      id: invalidate
      shell: bash
      run: |
        set -euo pipefail

        if [[ -n "${{ inputs.caller_reference }}" ]]; then
          CALLER_REF="${{ inputs.caller_reference }}"
        else
          TS=$(date +%s)
          SHA="${{ github.sha }}"; SHORT_SHA="${SHA:0:8}"
          CALLER_REF="gh-${TS}-${{ github.run_id }}-${SHORT_SHA}"
        fi

        read -r -a PATHS_ARRAY <<< "${{ inputs.paths }}"
        PATHS_COUNT=${#PATHS_ARRAY[@]}
        PATHS_JSON=$(printf '%s\n' "${PATHS_ARRAY[@]}" | jq -R . | jq -s .)

        INVALIDATION_BATCH=$(jq -n \
          --argjson paths "$PATHS_JSON" \
          --arg caller "$CALLER_REF" \
          --argjson qty "$PATHS_COUNT" \
          '{Paths:{Quantity:$qty,Items:$paths},CallerReference:$caller}')

        echo "üöÄ Creating CloudFront invalidation"
        echo "‚Ä¢ Distribution: ${{ inputs.distribution_id }}"
        echo "‚Ä¢ CallerReference: $CALLER_REF"
        echo "‚Ä¢ Paths ($PATHS_COUNT): ${{ inputs.paths }}"

        RESP=$(aws cloudfront create-invalidation \
          --distribution-id "${{ inputs.distribution_id }}" \
          --invalidation-batch "$INVALIDATION_BATCH" \
          --output json \
          --no-cli-pager)

        ID=$(echo "$RESP" | jq -r '.Invalidation.Id')
        STATUS=$(echo "$RESP" | jq -r '.Invalidation.Status')

        echo "invalidation_id=$ID"       >> "$GITHUB_OUTPUT"
        echo "status=$STATUS"            >> "$GITHUB_OUTPUT"
        echo "caller_reference=$CALLER_REF" >> "$GITHUB_OUTPUT"

        echo "‚úÖ Invalidation created: $ID (status: $STATUS)"

    - name: Wait for completion
      if: inputs.wait_for_completion == 'true'
      shell: bash
      run: |
        set -euo pipefail

        DIST="${{ inputs.distribution_id }}"
        ID="${{ steps.invalidate.outputs.invalidation_id }}"

        echo "‚è≥ Waiting for invalidation $ID to become Completed..."

        ATTEMPTS=0
        MAX_ATTEMPTS=90
        while (( ATTEMPTS < MAX_ATTEMPTS )); do
          STATUS=$(aws cloudfront get-invalidation \
            --distribution-id "$DIST" \
            --id "$ID" \
            --output json \
            --no-cli-pager | jq -r '.Invalidation.Status')

          echo "  Attempt $((ATTEMPTS+1))/$MAX_ATTEMPTS ‚Äî status: $STATUS"
          if [[ "$STATUS" == "Completed" ]]; then
            echo "‚úÖ Invalidation completed"
            break
          fi
          ATTEMPTS=$((ATTEMPTS+1))
          sleep 10
        done

        if (( ATTEMPTS == MAX_ATTEMPTS )); then
          echo "‚ö†Ô∏è  Timed out waiting for completion ‚Äî current status: $STATUS"
        fi

    - name: Summary
      if: always()
      shell: bash
      run: |
        set -euo pipefail

        STATUS_ICON="‚ùå"
        [[ "${{ steps.invalidate.outputs.invalidation_id }}" != "" ]] && STATUS_ICON="‚úÖ"

        ID="${{ steps.invalidate.outputs.invalidation_id }}"
        CF_LINK="https://console.aws.amazon.com/cloudfront/v4/home#/distributions/${DIST}/invalidations/${ID}"

        {
          echo "## üìä CloudFront Invalidation ${STATUS_ICON}"
          echo "- **Invalidation ID:** \`${ID:-N/A}\`"
          echo "- **Status:** \`${{ steps.invalidate.outputs.status || 'N/A' }}\`"
          echo "- **Paths:** \`${{ inputs.paths }}\`"
          echo "- **CallerReference:** \`${{ steps.invalidate.outputs.caller_reference || 'auto' }}\`"
          if [[ -n "$ID" ]]; then
            echo "- **Console:** ${CF_LINK}"
          fi

          echo ""
          if [[ "${{ inputs.wait_for_completion }}" == "true" ]]; then
            echo "‚è±Ô∏è Waited for completion: **true**"
          else
            echo "‚è±Ô∏è Waited for completion: **false** (status may change to *Completed* in ~10‚Äì15 minutes)"
          fi
        } >> "$GITHUB_STEP_SUMMARY"

