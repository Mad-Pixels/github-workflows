name: ECR Push
description: Push Docker image to AWS ECR (supports OIDC or access keys)

inputs:
  aws_access_key_id:
    description: 'AWS access key ID (optional if using OIDC)'
    required: false
  aws_secret_access_key:
    description: 'AWS secret access key (optional if using OIDC)'
    required: false
  aws_region:
    description: 'AWS region'
    required: true
    default: 'us-east-1'
  aws_account_id:
    description: 'AWS account ID (12 digits)'
    required: true
  role_to_assume:
    description: 'IAM Role ARN to assume for OIDC authentication'
    required: false

  repository_name:
    description: 'ECR repository name (optional, defaults to image name)'
    required: false
  image:
    description: 'Local image name with tag (e.g. my-app:v1.0.0)'
    required: true
  additional_tags:
    description: 'Additional tags to push (space-separated)'
    required: false

outputs:
  image_uri:
    description: 'Full ECR image URI'
    value: ${{ steps.push.outputs.image_uri }}
  image_digest:
    description: 'Image digest (sha256)'
    value: ${{ steps.push.outputs.image_digest }}
  repository_uri:
    description: 'ECR repository URI'
    value: ${{ steps.push.outputs.repository_uri }}

runs:
  using: "composite"
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        set -e

        if [[ ! "${{ inputs.aws_account_id }}" =~ ^[0-9]{12}$ ]]; then
          echo "❌ Invalid aws_account_id: must be 12 digits"
          exit 1
        fi

        if [[ ! "${{ inputs.image }}" =~ ^.+:.+$ ]]; then
          echo "❌ Invalid image format: must be name:tag"
          exit 1
        fi

        if [ -z "${{ inputs.aws_access_key_id }}" ] && [ -z "${{ inputs.role_to_assume }}" ]; then
          echo "❌ Must provide either aws_access_key_id or role_to_assume"
          exit 1
        fi

        if [ -n "${{ inputs.aws_access_key_id }}" ] && [ -z "${{ inputs.aws_secret_access_key }}" ]; then
          echo "❌ aws_secret_access_key required when using aws_access_key_id"
          exit 1
        fi

    - name: Configure AWS credentials
      if: ${{ inputs.aws_access_key_id != '' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ${{ inputs.aws_region }}

    - name: Configure AWS OIDC role
      if: ${{ inputs.role_to_assume != '' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role_to_assume }}
        aws-region: ${{ inputs.aws_region }}

    - name: Check AWS identity
      shell: bash
      run: |
        echo "🔐 Verifying AWS authentication"
        aws sts get-caller-identity || {
          echo "❌ Failed to authenticate with AWS"
          exit 1
        }

    - name: Ensure ECR repository exists
      shell: bash
      run: |
        set -e
        IMAGE_NAME=$(echo "${{ inputs.image }}" | cut -d':' -f1)
        REPO_NAME="${{ inputs.repository_name:-$IMAGE_NAME }}"
        aws ecr describe-repositories \
          --repository-names "$REPO_NAME" \
          --region "${{ inputs.aws_region }}" >/dev/null 2>&1 || {
            echo "❌ ECR repository not found: $REPO_NAME"
            echo "Create it with:"
            echo "aws ecr create-repository --repository-name $REPO_NAME"
            exit 1
          }
        echo "REPO_NAME=$REPO_NAME" >> "$GITHUB_ENV"

    - name: Login to Amazon ECR
      shell: bash
      run: |
        set -e
        ECR_REGISTRY="${{ inputs.aws_account_id }}.dkr.ecr.${{ inputs.aws_region }}.amazonaws.com"
        echo "ECR_REGISTRY=$ECR_REGISTRY" >> "$GITHUB_ENV"
        echo "🔐 Logging into $ECR_REGISTRY"
        aws ecr get-login-password --region "${{ inputs.aws_region }}" \
          | docker login --username AWS --password-stdin "$ECR_REGISTRY"

    - name: Tag and push Docker image
      id: push
      shell: bash
      run: |
        set -e

        LOCAL_IMAGE="${{ inputs.image }}"
        IMAGE_TAG=$(echo "$LOCAL_IMAGE" | cut -d':' -f2)
        FULL_IMAGE_URI="$ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG"

        echo "🏷️ Tagging image as: $FULL_IMAGE_URI"
        docker tag "$LOCAL_IMAGE" "$FULL_IMAGE_URI"
        docker push "$FULL_IMAGE_URI"

        IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$FULL_IMAGE_URI" | cut -d'@' -f2)

        echo "✅ Primary image pushed: $FULL_IMAGE_URI"
        echo "image_uri=$FULL_IMAGE_URI" >> "$GITHUB_OUTPUT"
        echo "image_digest=$IMAGE_DIGEST" >> "$GITHUB_OUTPUT"
        echo "repository_uri=$ECR_REGISTRY/$REPO_NAME" >> "$GITHUB_OUTPUT"

        if [ -n "${{ inputs.additional_tags }}" ]; then
          echo "🏷️ Pushing additional tags: ${{ inputs.additional_tags }}"
          for tag in ${{ inputs.additional_tags }}; do
            ALT_URI="$ECR_REGISTRY/$REPO_NAME:$tag"
            docker tag "$LOCAL_IMAGE" "$ALT_URI"
            docker push "$ALT_URI"
            echo "✔️  Pushed: $ALT_URI"
          done
        fi

    - name: Summary
      shell: bash
      run: |
        echo "## 🐳 ECR Push Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Source Image:** ${{ inputs.image }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ECR Registry:** $ECR_REGISTRY" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository:** $REPO_NAME" >> $GITHUB_STEP_SUMMARY
        echo "- **Image URI:** ${{ steps.push.outputs.image_uri }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Digest:** ${{ steps.push.outputs.image_digest }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region:** ${{ inputs.aws_region }}" >> $GITHUB_STEP_SUMMARY

        if [ -n "${{ inputs.additional_tags }}" ]; then
          echo "- **Additional Tags:** ${{ inputs.additional_tags }}" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Successfully pushed image to ECR" >> $GITHUB_STEP_SUMMARY
