---
name: 'Docker Build & Push'
description: 'Build and push multi-platform Docker images'

inputs:
  docker_user:
    description: 'Registry username'
    required: true
  docker_token:
    description: 'Registry access token / password'
    required: true
  registry:
    description: 'Container registry host (e.g. docker.io, ghcr.io)'
    required: false
    default: 'docker.io'

  repository:
    description: 'Image repository (e.g. username/image or ghcr.io/org/image)'
    required: true
  tag:
    description: 'Image tag (e.g. v1.0.0)'
    required: true
  push_latest:
    description: 'Also tag and push :latest (true/false)'
    required: false
    default: 'false'

  platforms:
    description: 'Target platforms (comma-separated)'
    required: false
    default: 'linux/amd64,linux/arm64'

  build_args:
    description: 'Build args as JSON object (e.g. {"VERSION":"1.0","NODE_ENV":"production"})'
    required: false
    default: '{}'

  artifact_name:
    description: 'Optional artifact name to download and use as build context'
    required: false
    default: ''
  context_path:
    description: 'Build context path (relative to repo root or artifact root)'
    required: false
    default: '.'
  dockerfile_path:
    description: 'Path to Dockerfile (relative to context_path)'
    required: false
    default: 'Dockerfile'

outputs:
  image_digest:
    description: 'Pushed image manifest-list digest (sha256:...)'
    value: ${{ steps.resolve_digest.outputs.digest }}

runs:
  using: composite
  steps:
    - name: Decide build context
      id: ctx
      shell: bash
      run: |
        set -euo pipefail
        if [[ -n "${{ inputs.artifact_name }}" ]]; then
          echo "using_artifact=true" >> "$GITHUB_OUTPUT"
          echo "context=./artifact/${{ inputs.context_path }}" >> "$GITHUB_OUTPUT"
        else
          echo "using_artifact=false" >> "$GITHUB_OUTPUT"
          echo "context=${{ inputs.context_path }}" >> "$GITHUB_OUTPUT"
        fi

    - name: Checkout repository
      if: steps.ctx.outputs.using_artifact == 'false'
      uses: actions/checkout@v4

    - name: Download artifact
      if: steps.ctx.outputs.using_artifact == 'true'
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact_name }}
        path: ./artifact

    - name: Log in to registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.docker_user }}
        password: ${{ inputs.docker_token }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true

    - name: Build and push
      id: build
      shell: bash
      env:
        REGISTRY: ${{ inputs.registry }}
        REPO: ${{ inputs.repository }}
        TAG: ${{ inputs.tag }}
        PLATFORMS: ${{ inputs.platforms }}
        BUILD_ARGS_JSON: ${{ inputs.build_args }}
        PUSH_LATEST: ${{ inputs.push_latest }}
        CONTEXT: ${{ steps.ctx.outputs.context }}
        DOCKERFILE_REL: ${{ inputs.dockerfile_path }}
      run: |
        set -euo pipefail

        # Normalize repository to include registry only when non-default
        if [[ "$REGISTRY" != "docker.io" && "$REPO" != "${REGISTRY}/"* ]]; then
          IMAGE="${REGISTRY}/${REPO}"
        else
          IMAGE="${REPO}"
        fi

        DOCKERFILE="${CONTEXT}/${DOCKERFILE_REL}"
        echo "üì¶ Context: ${CONTEXT}"
        echo "üìù Dockerfile: ${DOCKERFILE}"
        echo "üéØ Targets: ${PLATFORMS}"
        echo "üè∑Ô∏è  Image: ${IMAGE}:${TAG}"

        BUILD_ARGS=""
        if [[ "${BUILD_ARGS_JSON}" != "{}" ]]; then
          echo "üîß Build args provided:"
          echo "${BUILD_ARGS_JSON}" | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read -r kv; do
            echo "  - $kv"
          done
          # shell word-split: safe because we quote each arg later
          while IFS='=' read -r k v; do
            # Preserve exact value, including spaces/colons
            BUILD_ARGS+=" --build-arg ${k}=$(printf '%s' "$v")"
          done < <(echo "${BUILD_ARGS_JSON}" | jq -r 'to_entries[] | "\(.key)=\(.value)"')
        fi

        TAGS="-t ${IMAGE}:${TAG}"
        if [[ "${PUSH_LATEST}" == "true" ]]; then
          TAGS="${TAGS} -t ${IMAGE}:latest"
        fi

        docker buildx build \
          --platform "${PLATFORMS}" \
          --file "${DOCKERFILE}" \
          ${TAGS} \
          ${BUILD_ARGS} \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          --push \
          "${CONTEXT}"

    - name: Resolve pushed digest
      id: resolve_digest
      shell: bash
      env:
        REGISTRY: ${{ inputs.registry }}
        REPO: ${{ inputs.repository }}
        TAG: ${{ inputs.tag }}
      run: |
        set -euo pipefail
        if [[ "$REGISTRY" != "docker.io" && "$REPO" != "${REGISTRY}/"* ]]; then
          IMAGE="${REGISTRY}/${REPO}"
        else
          IMAGE="${REPO}"
        fi
        echo "üîé Resolve digest for ${IMAGE}:${TAG}"
        DIGEST=$(docker buildx imagetools inspect "${IMAGE}:${TAG}" 2>/dev/null | awk '/Digest:/ {print $2; exit}')
        if [[ -z "${DIGEST:-}" ]]; then
          echo "‚ùå Unable to resolve digest for ${IMAGE}:${TAG}"
          exit 1
        fi
        echo "digest=${DIGEST}" >> "$GITHUB_OUTPUT"
        echo "‚úÖ Digest: ${DIGEST}"

    - name: Summary
      shell: bash
      env:
        REGISTRY: ${{ inputs.registry }}
        REPO: ${{ inputs.repository }}
        TAG: ${{ inputs.tag }}
        PLATFORMS: ${{ inputs.platforms }}
        BUILD_ARGS_JSON: ${{ inputs.build_args }}
        PUSH_LATEST: ${{ inputs.push_latest }}
      run: |
        set -euo pipefail
        if [[ "$REGISTRY" != "docker.io" && "$REPO" != "${REGISTRY}/"* ]]; then
          IMAGE="${REGISTRY}/${REPO}"
        else
          IMAGE="${REPO}"
        fi

        echo "## üê≥ Docker Build & Push" >> "$GITHUB_STEP_SUMMARY"
        echo "- Image: \`${IMAGE}\`" >> "$GITHUB_STEP_SUMMARY"
        echo "- Tags:" >> "$GITHUB_STEP_SUMMARY"
        echo "  - \`${IMAGE}:${TAG}\`" >> "$GITHUB_STEP_SUMMARY"
        if [[ "${PUSH_LATEST}" == "true" ]]; then
          echo "  - \`${IMAGE}:latest\`" >> "$GITHUB_STEP_SUMMARY"
        fi
        echo "- Platforms: \`${PLATFORMS}\`" >> "$GITHUB_STEP_SUMMARY"
        echo "- Digest: \`${{ steps.resolve_digest.outputs.digest }}\`" >> "$GITHUB_STEP_SUMMARY"
        echo "- Dockerfile: \`${{ steps.ctx.outputs.context }}/${{ inputs.dockerfile_path }}\`" >> "$GITHUB_STEP_SUMMARY"
        echo "- Context: \`${{ steps.ctx.outputs.context }}\`" >> "$GITHUB_STEP_SUMMARY"
        if [[ "${BUILD_ARGS_JSON}" != "{}" ]]; then
          echo "- Build args:" >> "$GITHUB_STEP_SUMMARY"
          echo '```json' >> "$GITHUB_STEP_SUMMARY"
          echo "${BUILD_ARGS_JSON}" | jq . >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"
        fi