---
name: 'Docker Build & Push'
description: 'Build and push multi-platform Docker images'

inputs:
  docker_user:
    description: 'Registry username'
    required: true
  docker_token:
    description: 'Registry access token / password'
    required: true
  registry:
    description: 'Container registry host (e.g. docker.io, ghcr.io)'
    required: false
    default: 'docker.io'

  repository:
    description: 'Image repository (e.g. username/image or ghcr.io/org/image)'
    required: true
  tag:
    description: 'Image tag (e.g. v1.0.0)'
    required: true
  push_latest:
    description: 'Also tag and push :latest (true/false)'
    required: false
    default: 'false'

  platforms:
    description: 'Target platforms (comma-separated)'
    required: false
    default: 'linux/amd64,linux/arm64'

  build_args:
    description: 'Build args as JSON object (e.g. {"VERSION":"1.0","NODE_ENV":"production"})'
    required: false
    default: '{}'

  artifact_name:
    description: 'Optional artifact name to download and use as build context'
    required: false
    default: ''
  context_path:
    description: 'Build context path (relative to repo root or artifact root)'
    required: false
    default: '.'
  dockerfile_path:
    description: 'Path to Dockerfile (relative to context_path)'
    required: false
    default: 'Dockerfile'

  show_summary:
    description: 'Print summary in the job summary'
    required: false
    default: 'true'
  summary_limit:
    description: 'Max number of output lines to show in summary (kept for consistency)'
    required: false
    default: '250'

outputs:
  image_digest:
    description: 'Pushed image manifest-list digest (sha256:...)'
    value: ${{ steps.resolve_digest.outputs.digest }}
  build_duration:
    description: 'Build duration in seconds'
    value: ${{ steps.build.outputs.build_duration }}
  image_size:
    description: 'Image size in bytes'
    value: ${{ steps.resolve_digest.outputs.image_size }}
  image_ref:
    description: 'Fully qualified image@digest'
    value: ${{ steps.resolve_digest.outputs.image_ref }}

runs:
  using: composite
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        set -euo pipefail

        if [[ ! "${{ inputs.tag }}" =~ ^[A-Za-z0-9_][A-Za-z0-9_.-]{0,127}$ ]]; then
          echo "‚ùå Invalid tag: ${{ inputs.tag }}"
          echo "Allowed: first [A-Za-z0-9_], total ‚â§128, chars [A-Za-z0-9_.-]"
          exit 1
        fi

        IFS=',' read -ra PLATFORM_ARRAY <<< "${{ inputs.platforms }}"
        for platform in "${PLATFORM_ARRAY[@]}"; do
          platform="$(echo "$platform" | xargs)"
          if [[ ! "$platform" =~ ^[a-z]+/[a-z0-9]+(/v[0-9]+)?$ ]]; then
            echo "‚ùå Invalid platform: $platform (expected os/arch or os/arch/vN)"
            exit 1
          fi
        done

        if [[ "${{ inputs.repository }}" =~ [A-Z] ]]; then
          echo "‚ùå Repository name cannot contain uppercase letters: ${{ inputs.repository }}"
          exit 1
        fi

        if [[ "${{ inputs.build_args }}" != "{}" ]]; then
          if ! command -v jq >/dev/null 2>&1; then
            echo "‚ùå 'jq' is required to parse build_args JSON. Use ubuntu-latest or install jq."
            exit 1
          fi
          if ! echo "${{ inputs.build_args }}" | jq . >/dev/null 2>&1; then
            echo "‚ùå Invalid JSON in build_args"
            exit 1
          fi
        fi

        echo "‚úÖ Inputs validated"

    - name: Decide build context
      id: ctx
      shell: bash
      run: |
        set -euo pipefail

        if [[ -n "${{ inputs.artifact_name }}" ]]; then
          echo "using_artifact=true" >> "$GITHUB_OUTPUT"
          echo "context=./artifact/${{ inputs.context_path }}" >> "$GITHUB_OUTPUT"
        else
          echo "using_artifact=false" >> "$GITHUB_OUTPUT"
          echo "context=${{ inputs.context_path }}" >> "$GITHUB_OUTPUT"
        fi

    - name: Checkout repository
      if: steps.ctx.outputs.using_artifact == 'false'
      uses: actions/checkout@v4

    - name: Download artifact
      if: steps.ctx.outputs.using_artifact == 'true'
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact_name }}
        path: ./artifact

    - name: Log in to registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.docker_user }}
        password: ${{ inputs.docker_token }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true

    - name: Build and push
      id: build
      shell: bash
      env:
        DOCKERFILE_REL: ${{ inputs.dockerfile_path }}
        BUILD_ARGS_JSON: ${{ inputs.build_args }}
        CONTEXT: ${{ steps.ctx.outputs.context }}
        PUSH_LATEST: ${{ inputs.push_latest }}
        PLATFORMS: ${{ inputs.platforms }}
        REGISTRY: ${{ inputs.registry }}
        REPO: ${{ inputs.repository }}
        TAG: ${{ inputs.tag }}
      run: |
        set -euo pipefail

        BUILD_START=$(date +%s)
        if [[ "$REGISTRY" != "docker.io" && "$REPO" != "${REGISTRY}/"* ]]; then
          IMAGE="${REGISTRY}/${REPO}"
        else
          IMAGE="${REPO}"
        fi

        DOCKERFILE="${CONTEXT}/${DOCKERFILE_REL}"
        echo "üì¶ Context: ${CONTEXT}"
        echo "üìù Dockerfile: ${DOCKERFILE}"
        echo "üéØ Platforms: ${PLATFORMS}"
        echo "üè∑Ô∏è  Image: ${IMAGE}:${TAG}"

        if [[ ! -d "${CONTEXT}" ]]; then
          echo "‚ùå Build context not found: ${CONTEXT}"
          exit 1
        fi
        if [[ ! -f "${DOCKERFILE}" ]]; then
          echo "‚ùå Dockerfile not found: ${DOCKERFILE}"
          exit 1
        fi

        declare -a BUILD_ARGS_ARR=()
        if [[ "${BUILD_ARGS_JSON}" != "{}" ]]; then
          echo "üîß Build args provided:"

          while IFS=$'\t' read -r k v; do
            echo "  - ${k}=${v}"
            BUILD_ARGS_ARR+=(--build-arg "${k}=${v}")
          done < <(echo "${BUILD_ARGS_JSON}" | jq -r 'to_entries[] | "\(.key)\t\(.value|tostring)"')
        fi

        TAGS=(-t "${IMAGE}:${TAG}")
        if [[ "${PUSH_LATEST}" == "true" ]]; then
          TAGS+=(-t "${IMAGE}:latest")
        fi

        echo "üöÄ Starting Docker build..."
        docker buildx build \
          --platform "${PLATFORMS}" \
          --file "${DOCKERFILE}" \
          "${TAGS[@]}" \
          "${BUILD_ARGS_ARR[@]}" \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          --push \
          "${CONTEXT}"

        BUILD_END=$(date +%s)
        BUILD_DURATION=$((BUILD_END - BUILD_START))
        echo "‚è±Ô∏è Build completed in ${BUILD_DURATION} seconds"
        echo "build_duration=${BUILD_DURATION}" >> "$GITHUB_OUTPUT"
        echo "‚úÖ Docker build completed successfully"

        unset DOCKER_CONFIG 2>/dev/null || true

    - name: Resolve pushed digest
      id: resolve_digest
      shell: bash
      env:
        REGISTRY: ${{ inputs.registry }}
        REPO: ${{ inputs.repository }}
        TAG: ${{ inputs.tag }}
      run: |
        set -euo pipefail

        if [[ "$REGISTRY" != "docker.io" && "$REPO" != "${REGISTRY}/"* ]]; then
          IMAGE="${REGISTRY}/${REPO}"
        else
          IMAGE="${REPO}"
        fi

        echo "üîé Resolving digest for ${IMAGE}:${TAG}"

        MAX_ATTEMPTS=5
        ATTEMPT=0
        DIGEST=""

        while [[ $ATTEMPT -lt $MAX_ATTEMPTS ]]; do
          ATTEMPT=$((ATTEMPT + 1))
          echo "Attempt $ATTEMPT/$MAX_ATTEMPTS..."

          if DIGEST=$(
            docker buildx imagetools inspect \
              "${IMAGE}:${TAG}" 2>/dev/null | awk '/Digest:/ {print $2; exit}'); then
            if [[ -n "${DIGEST}" ]]; then
              echo "‚úÖ Digest resolved: ${DIGEST}"
              break
            fi
          fi
          if [[ $ATTEMPT -lt $MAX_ATTEMPTS ]]; then
            echo "‚è≥ Retrying in 3 seconds..."
            sleep 3
          fi
        done

        if [[ -z "${DIGEST}" ]]; then
          echo "‚ùå Unable to resolve digest for ${IMAGE}:${TAG} after $MAX_ATTEMPTS attempts"
          exit 1
        fi

        SIZE_INFO="$(
          docker buildx imagetools inspect \
            "${IMAGE}:${TAG}" \
            --format '{{.Manifest.Size}}' \
            2>/dev/null || true
          )"
          : "${SIZE_INFO:=unknown}"

        echo "digest=${DIGEST}" >> "$GITHUB_OUTPUT"
        echo "image_size=${SIZE_INFO}" >> "$GITHUB_OUTPUT"
        echo "image_ref=${IMAGE}@${DIGEST}" >> "$GITHUB_OUTPUT"

    - name: Summary
      if: always() && inputs.show_summary == 'true'
      continue-on-error: true
      shell: bash
      env:
        BUILD_ARGS_JSON: ${{ inputs.build_args }}
        PUSH_LATEST: ${{ inputs.push_latest }}
        PLATFORMS: ${{ inputs.platforms }}
        REGISTRY: ${{ inputs.registry }}
        REPO: ${{ inputs.repository }}
        TAG: ${{ inputs.tag }}
        LIMIT: ${{ inputs.summary_limit }}
        CONTEXT: ${{ steps.ctx.outputs.context }}
        DOCKERFILE_PATH: ${{ inputs.dockerfile_path }}
        BUILD_OUTCOME: ${{ steps.build.outcome }}
        DIGEST: ${{ steps.resolve_digest.outputs.digest }}
        IMAGE_SIZE: ${{ steps.resolve_digest.outputs.image_size }}
        IMAGE_REF: ${{ steps.resolve_digest.outputs.image_ref }}
        BUILD_DURATION: ${{ steps.build.outputs.build_duration }}
      run: |
        set -eo pipefail
        [[ "$LIMIT" =~ ^[0-9]+$ ]] || LIMIT=250

        STATUS_ICON="‚ùå"
        [ "${BUILD_OUTCOME:-failure}" = "success" ] && STATUS_ICON="‚úÖ"

        IMAGE="${REPO:-}"
        if [ -n "${REGISTRY:-}" ] && [ "${REGISTRY}" != "docker.io" ] && [[ "${REPO:-}" != "${REGISTRY}/"* ]]; then
          IMAGE="${REGISTRY}/${REPO}"
        fi

        {
          echo "## üê≥ Docker Build & Push ${STATUS_ICON}"
          echo "- **Image:** \`${IMAGE}\`"
          echo "- **Tags:**"
          echo "  - \`${IMAGE}:${TAG:-latest}\`"
          if [ "${PUSH_LATEST:-false}" = "true" ]; then
            echo "  - \`${IMAGE}:latest\`"
          fi
          echo "- **Platforms:** \`${PLATFORMS:-}\`"
          echo "- **Dockerfile:** \`${CONTEXT:-}.${DOCKERFILE_PATH:+/${DOCKERFILE_PATH}}\`"
          echo "- **Context:** \`${CONTEXT:-.}\`"

          if [ -n "${DIGEST:-}" ]; then
            echo "- **Digest:** \`${DIGEST}\`"
            echo "- **Build duration:** ${BUILD_DURATION:-N/A} seconds"
            echo "- **Image size:** ${IMAGE_SIZE:-N/A} bytes"
            [ -n "${IMAGE_REF:-}" ] && echo "- **Image ref:** \`${IMAGE_REF}\`"
          fi

          if [ -n "${BUILD_ARGS_JSON:-}" ] && [ "${BUILD_ARGS_JSON}" != "{}" ]; then
            echo
            echo "### Build args"
            echo '```json'
            if command -v jq >/dev/null 2>&1; then
              printf '%s\n' "${BUILD_ARGS_JSON}" | jq .
            else
              printf '%s\n' "${BUILD_ARGS_JSON}"
            fi
            echo '```'
          fi

          echo
          if [ "${BUILD_OUTCOME:-failure}" = "success" ]; then
            echo "‚úÖ **Build successful** ‚Äî image pushed to registry"
          else
            echo "‚ùå **Build failed** ‚Äî check logs for details"
          fi
        } >> "${GITHUB_STEP_SUMMARY:-/dev/null}" || true
