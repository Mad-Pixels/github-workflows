---
name: 'Tag Creator'
description: 'Create git tags with validation'

inputs:
  tag:
    description: 'Tag to create'
    required: true
  token:
    description: 'GitHub token'
    required: true
  force:
    description: 'Force overwrite existing tag'
    required: false
    default: 'false'
  branch:
    description: 'Branch to tag from'
    required: false
    default: 'main'
  tag_format:
    description: 'Tag format validation regex'
    required: false
    default: '^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$'
  message:
    description: 'Tag message (creates annotated tag if provided)'
    required: false
  lightweight:
    description: 'Create lightweight tag (ignores message)'
    required: false
    default: 'false'

outputs:
  tag_sha:
    description: 'SHA of the created tag'
    value: ${{ steps.create_tag.outputs.tag_sha }}
  tag_exists:
    description: 'Whether tag existed before creation'
    value: ${{ env.TAG_EXISTS }}
  tag_url:
    description: 'GitHub URL of the created tag'
    value: ${{ steps.create_tag.outputs.tag_url }}

runs:
  using: composite
  steps:
    - name: Export inputs as env
      shell: bash
      run: |
        set -euo pipefail

        echo "TAG_NAME=${{ inputs.tag }}" >> "$GITHUB_ENV"
        echo "BRANCH_NAME=${{ inputs.branch }}" >> "$GITHUB_ENV"
        echo "FORCE_CREATE=${{ inputs.force }}" >> "$GITHUB_ENV"
        echo "LIGHTWEIGHT=${{ inputs.lightweight }}" >> "$GITHUB_ENV"
        echo "TAG_FORMAT=${{ inputs.tag_format }}" >> "$GITHUB_ENV"

        DELIM="MSG_$(date +%s%N)"
        {
          echo "TAG_MESSAGE<<$DELIM"
          printf "%s" "${{ inputs.message }}"
          echo
          echo "$DELIM"
        } >> "$GITHUB_ENV"

    - name: Validate inputs
      shell: bash
      run: |
        set -euo pipefail

        if ! command -v git &> /dev/null; then
          echo "❌ Git is not installed"
          exit 1
        fi

        if [[ ! "$TAG_NAME" =~ $TAG_FORMAT ]]; then
          echo "❌ Invalid tag format: $TAG_NAME"
          echo "Expected: $TAG_FORMAT"
          exit 1
        fi

        if [ -z "$TAG_NAME" ]; then
          echo "❌ Tag name cannot be empty"
          exit 1
        fi

        echo "✅ Inputs validated"

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ inputs.branch }}
        token: ${{ inputs.token }}

    - name: Verify branch
      shell: bash
      run: |
        set -euo pipefail
        echo "Verifying branch $BRANCH_NAME"

        if ! git ls-remote --heads origin "refs/heads/$BRANCH_NAME" | grep -q "refs/heads/${BRANCH_NAME}$"; then
          echo "❌ Branch $BRANCH_NAME not found on remote"
          exit 1
        fi

        echo "✅ Branch exists"

    - name: Check if tag exists
      shell: bash
      run: |
        set -euo pipefail

        TAG_EXISTS=false
        if git rev-parse "$TAG_NAME" >/dev/null 2>&1 || \
           git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME$"; then
          TAG_EXISTS=true
          if [ "$FORCE_CREATE" != "true" ]; then
            echo "❌ Tag $TAG_NAME already exists. Use 'force: true' to overwrite"
            exit 1
          fi
        fi

        echo "TAG_EXISTS=$TAG_EXISTS" >> $GITHUB_ENV
        echo "Tag exists: $TAG_EXISTS"

    - name: Configure Git user
      shell: bash
      run: |
        set -euo pipefail

        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"

    - name: Create or replace tag
      id: create_tag
      shell: bash
      run: |
        set -euo pipefail

        COMMIT_SHA=$(git rev-parse HEAD)
        echo "tag_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
        echo "tag_url=https://github.com/${{ github.repository }}/releases/tag/$TAG_NAME" \
          >> $GITHUB_OUTPUT

        echo "🏷️ Tag: $TAG_NAME"
        echo "📌 Commit: $COMMIT_SHA"
        echo "🧑 Author: ${{ github.actor }}"

        if [ "$TAG_EXISTS" = "true" ]; then
          echo "🗑️ Deleting existing tag..."

          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            git tag -d "$TAG_NAME"
            echo "✅ Local tag deleted"
          fi
          
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME$"; then
            git push origin ":refs/tags/$TAG_NAME"
            echo "✅ Remote tag deleted"
          fi
        fi

        if [ "$LIGHTWEIGHT" = "true" ]; then
          git tag "$TAG_NAME"
          echo "✅ Created lightweight tag"
        elif [ -n "${TAG_MESSAGE// /}" ]; then 
          printf "%s" "$TAG_MESSAGE" | git tag -a "$TAG_NAME" -F -
          echo "✅ Created annotated tag with message"
        else
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          echo "✅ Created annotated tag with default message"
        fi

        git push origin "$TAG_NAME"
        echo "🚀 Tag pushed: $TAG_NAME"

    - name: Verify tag
      shell: bash
      run: |
        set -euo pipefail

        echo "⏳ Verifying remote tag exists..."

        ATTEMPTS=0
        while [ $ATTEMPTS -lt 5 ]; do
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME$"; then
            echo "✅ Remote tag verified"
            break
          fi
          ATTEMPTS=$((ATTEMPTS+1))
          sleep 2
        done

        if [ $ATTEMPTS -eq 5 ]; then
          echo "⚠️  Remote tag still not visible, might be delayed"
        fi

    - name: Summary
      shell: bash
      run: |
        set -euo pipefail

        TYPE="Annotated"
        if [ "${LIGHTWEIGHT}" = "true" ]; then
          TYPE="Lightweight"
        fi

        {
          echo "## 🏷️ Tag Created"
          echo "- **Tag:** ${TAG_NAME}"
          echo "- **SHA:** ${{ steps.create_tag.outputs.tag_sha }}"
          echo "- **Branch:** ${BRANCH_NAME}"
          echo "- **Type:** ${TYPE}"
          echo "- **Force:** ${FORCE_CREATE}"
          echo "- **Tag URL:** [View Tag](${{ steps.create_tag.outputs.tag_url }})"

          if [ -n "${TAG_MESSAGE}" ]; then
            echo ""
            echo "### Message"
            echo '```'
            printf "%s\n" "${TAG_MESSAGE}"
            echo '```'
          fi

          echo ""
          echo "🎉 Tagging complete!"
        } >> "$GITHUB_STEP_SUMMARY"

